generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  blog          Blog[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Tags {
  id      String      @id @default(cuid())
  tagName String
  blogs   TagOnBlog[]
}

model Blog {
  title        String
  date         DateTime    @default(now()) @map("createdAt")
  lastmod      DateTime?   @map("updatedAt")
  authorId     String
  authors      String[]
  canonicalUrl String?
  draft        Boolean     @default(false)
  images       String[]
  layout       BlogLayout  @default(PostLayout)
  summary      String?
  id           Int         @id @default(autoincrement())
  author       User        @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tags         TagOnBlog[]
  filepath     String
}

model TagOnBlog {
  blogId     Int
  tagId      String
  assignedAt DateTime @default(now())
  blog       Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  tag        Tags     @relation(fields: [tagId], references: [id])

  @@id([blogId, tagId])
}

enum BlogLayout {
  PostLayout
  PostBanner
  PostSimple
}
